Arrays and Functions
Throughout the lesson we went over arrays being mutable, or changeable. Well what happens if we try to 
change an array inside a function? Does the array keep the change after the function call or is it scoped 
to inside the function?

Take a look at the following example where we call .push() on an array inside a function. Recall, the 
.push() method mutates, or changes, an array:

const flowers = ['peony', 'daffodil', 'marigold'];
 
function addFlower(arr) {
  arr.push('lily');
}
 
addFlower(flowers);
 
console.log(flowers); // Output: ['peony', 'daffodil', 'marigold', 'lily']
Let’s go over what happened in the example:

The flowers array that has 3 elements.
The function addFlower() has a parameter of arr uses .push() to add a 'lily' element into arr.
We call addFlower() with an argument of flowers which will execute the code inside addFlower.
We check the value of flowers and it now includes the 'lily' element! The array was mutated!
So when you pass an array into a function, if the array is mutated inside the function, that 
change will be maintained outside the function as well. You might also see this concept explained 
as pass-by-reference since what we’re actually passing the function is a reference to where the 
variable memory is stored and changing the memory.

const concept = ['arrays', 'can', 'be', 'mutated'];

function changeArr(arr){
  arr[3] = 'MUTATED';
}

changeArr(concept);

console.log(concept);

const removeElement = newArr => {
  newArr.pop()
}

removeElement(concept);

console.log(concept);